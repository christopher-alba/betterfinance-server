type Query {
  me: User
  getProfile(userID: ID!): Profile
  getAllUserIncomes(profileID: ID!): [Income]
  getAllUserExpenses(profileID: ID!): [Expense]
  getAllUserGoals(profileID: ID!): [Goal]
}

type Mutation {
  register(username: String!, password: String!, email: String!): User
  login(username: String!, password: String!): User
  updateProfile(profileObj: updateProfileArgs!, profileID: ID!): Profile
  createIncome(income: createIncomeArgs!): Income
  updateIncome(incomeObj: updateIncomeArgs!, incomeID: String!): Income
  deleteIncome(incomeID: String!): Int
  deleteAllUserIncomes(profileID: ID!): Int
  createExpense(expense: createExpenseArgs!): Expense
  updateExpense(expenseObj: updateExpenseArgs!, expenseID: String!): Expense
  deleteExpense(expenseID: String!): Int
  deleteAllUserExpenses(profileID: ID!): Int
  createGoal(goal: createGoalArgs!): Goal
  updateGoal(goalObj: updateGoalArgs!, goalID: String!): Goal
  deleteGoal(goalID: String!): Int
  deleteAllUserGoals(profileID: ID!): Int
}

input createProfileArgs {
  email: String!
  userID: String!
}
input updateProfileArgs {
  email: String
}
input createIncomeArgs {
  name: String! 
  amount: Float!
  frequency: Frequency!
  active: Boolean! = true
  profileID: ID!
}

input updateIncomeArgs {
  name: String
  amount: Float
  frequency: Frequency
  active: Boolean
}

input createExpenseArgs {
  name: String! 
  amount: Float!
  frequency: Frequency!
  active: Boolean! = true
  profileID: ID!
}

input updateExpenseArgs {
  name: String
  amount: Float
  frequency: Frequency
  active: Boolean
}

input createGoalArgs {
  name: String!
  targetAmount: Float!
  completionDate: String!
  contributionAmount: Float!
  contributionFrequency: Frequency!
  active: Boolean! = true
  profileID: ID!
}

input updateGoalArgs {
  name: String
  targetAmount: Float
  completionDate: String
  contributionAmount: Float
  contributionFrequency: Frequency
  active: Boolean
}


type User {
  username: String!
  password: String!
  token: String!
  _id: ID!
}

type Profile {
  email: String!
  userID: String!
  _id: ID!
}

type Income {
  name: String!
  amount: Float!
  frequency: Frequency!
  active: Boolean!
  profileID: ID!
  _id: ID!
}

type Expense {
  name: String!
  amount: Float!
  frequency: Frequency!
  active: Boolean!
  profileID: ID!
  _id: ID!
}

type Goal {
  name: String!
  targetAmount: Float!
  completionDate: String!
  contributionAmount: Float!
  contributionFrequency: Frequency!
  active: Boolean!
  profileID: ID!
  _id: ID!
}

enum Frequency {
  Daily
  Weekly
  Monthly
  Yearly
}
